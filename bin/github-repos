#!/bin/sh
#/ Usage: github-repos <user> <token>
#/
#/ Writes the HTTPS clone URLs of all GitHub repositories accessible by the
#/ given GitHub user and token to stdout.
#/
#/ Inspired by https://github.com/mrtazz/bin/blob/master/github_repo_list.sh
set -e

user="$1"
token="$2"

# usage and help
if test $# -eq 0 || test -z "$user" || test -z "$token"
then
    cat "$0" | grep '^#/' | cut -c4- 1>&2
    exit 2
fi

# construct the various api url
authparam="access_token=$token"
apiurl="https://api.github.com"
authurl="$apiurl/user?$authparam"
orgsurl="$apiurl/user/orgs?$authparam"
reposurl="$apiurl/user/repos?$authparam"

# make sure we're authenticated
if ! headers "$authurl" | grep -q "Status: 200 OK"
then
    echo "github-repos: Authentication failed. Check the given user and " \
        "token are valid." 1>&2
    exit 1
fi

# list all repositories clone urls exposed at the given api
list_repos() {
    url="$1"

    # grab the last page number
    last_page=$(
        headers "$url" |
        grep Link: |
        cut -d"," -f2 |
        cut -d"&" -f2 |
        cut -d"=" -f2 |
        cut -d">" -f1
    )

    # the Link header is omitted when there's only one page. default to 1
    test -z "$last_page" && {
        last_page="1"
    }

    # iterate through all pages and write the repos' clones urls to stdout
    for i in $(seq 1 $last_page)
    do
        curl -s -f "$url&page=$i" |
            grep clone_url |
            cut -d" " -f6 |
            sed -e "s/[\",]//g" |
            tr ' ' '\n'
    done
}

# write all of the user's repos clone urls
list_repos "$reposurl"

# iterate through all the organizations the user has access to
curl -s -f "$orgsurl" |
grep login |
cut -d" " -f6 |
sed -e "s/[\",]//g" |
tr ' ' '\n' |
grep -v boxen |
while read line
do
    # write all of the organization's repos clone urls
    orgname="$line"
    list_repos "$apiurl/orgs/$orgname/repos?$authparam"
done
